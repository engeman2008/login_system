"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const express_1 = require("express");
const connect_ensure_login_1 = (0, tslib_1.__importDefault)(require("connect-ensure-login"));
const login_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/auth/login.controller"));
const register_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/auth/register.controller"));
const activate_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/auth/activate.controller"));
const dashboard_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/dashboard.controller"));
const error_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/error.controller"));
const user_controller_1 = (0, tslib_1.__importDefault)(require("../controllers/user.controller"));
const validator_1 = require("../controllers/validator");
const router = (0, express_1.Router)();
const loginController = new login_controller_1.default();
const registerController = new register_controller_1.default();
const activateController = new activate_controller_1.default();
const dashboardController = new dashboard_controller_1.default();
const errorController = new error_controller_1.default();
const userController = new user_controller_1.default();
router.get('/', (req, res) => {
    if (req.user) {
        return res.redirect('/dashboard');
    }
    return res.redirect('/login');
});
router.get('/404', errorController.get404);
router.get('/500', errorController.get500);
router.get('/login', loginController.getLogin);
router.post('/login', loginController.postLogin);
router.get('/signup', registerController.getSignup);
router.post('/signup', (0, validator_1.vRegisterRules)(), registerController.postSignup);
router.get('/auth/facebook', loginController.getFacebookLogin);
router.get('/auth/facebook/callback', loginController.handleFacebookLogin);
router.get('/auth/google', loginController.getGoogleLogin);
router.get('/auth/google/callback', loginController.handleGoogleLogin);
router.get('/logout', loginController.postLogout);
router.get('/activate/:userId/:activationCode', activateController.activate);
router.get('/send-verify-email', connect_ensure_login_1.default.ensureLoggedIn(), registerController.resendEmail);
router.get('/welcome', connect_ensure_login_1.default.ensureLoggedIn(), dashboardController.welcome);
router.get('/dashboard', connect_ensure_login_1.default.ensureLoggedIn(), dashboardController.index);
router.get('/profile', connect_ensure_login_1.default.ensureLoggedIn(), userController.profile);
router.post('/profile', connect_ensure_login_1.default.ensureLoggedIn(), userController.update);
router.get('/reset-password', connect_ensure_login_1.default.ensureLoggedIn(), userController.getResetPassword);
router.post('/reset-password', connect_ensure_login_1.default.ensureLoggedIn(), (0, validator_1.resetPasswordRules)(), userController.postResetPassword);
exports.default = router;
